<!--
author: 7happy7
license: CC BY-SA 3.0

reference material:
https://ja.wikipedia.org/wiki/HSV%E8%89%B2%E7%A9%BA%E9%96%93
by ja.wikipedia Contributors (https://ja.wikipedia.org/w/index.php?title=HSV%E8%89%B2%E7%A9%BA%E9%96%93&action=history)
(English) https://en.wikipedia.org/wiki/HSL_and_HSV
CC BY-SA 3.0
-->
<head>
<style>
input[type="number"]::-webkit-outer-spin-button,input[type="number"]::-webkit-inner-spin-button {-webkit-appearance: none;margin: 0;}input[type="number"] {-moz-appearance:textfield;}
</style>
</head>
<body style="margin: 0; padding: 0;">
<table style="width:100%;font-size:13px;">
<tbody>
<tr>
<td>color code: <input type="text" id="cCode" size="7" oninput="CodeToRGB()" onchange="CodeToRGB()" value="#ff0000"></td>
<td rowspan="2" id="thisColor" style="background-color: rgb(255,0,0); padding: 1em; text-align: center; width: 40%;">
<div  style="background-color: #fff; padding: 1em; margin: 0.5em;border: 4px solid #000;">
<span id="hsvValue"></span>
</div>
</td>
</tr>
<tr>
<td style="width:40%;">
R: <input type="number" id="rNum" min="0" max="255" onKeyUp="keyRGB()" value="255"><input type="range" step="1" oninput="funcRGB()" 
onchange="funcRGB()" min="0" max="255" id="vR" value="255"><br>
G: <input type="number" id="gNum" min="0" max="255" onKeyUp="keyRGB()" value="0"><input type="range" step="1" oninput="funcRGB()" onchange="funcRGB()" min="0" max="255" id="vG" value="0"><br>
B: <input type="number" id="bNum" min="0" max="255" onKeyUp="keyRGB()" value="0"><input type="range" step="1" oninput="funcRGB()" onchange="funcRGB()" min="0" max="255" id="vB" value="0">
</td>
</tr>
</tbody>
</table>

<!-- value of HSV rounding off -->
<div style="display:none;">
<!-- H [0-360]: --><input type="range" step="1" id="vH" max="360"><br>
<!-- S [0-100]: --><input type="range" step="1" id="vS"><br>
<!-- V [0-100]: --><input type="range" step="1" id="vV">
</div>
</body>

<script type="text/javascript">
var vR = document.getElementById("vR");
var vG = document.getElementById("vG");
var vB = document.getElementById("vB");
 
var vH = document.getElementById("vH");
var vS = document.getElementById("vS");
var vV = document.getElementById("vV");
 
var thisColor = document.getElementById("thisColor");
var hsvValue = document.getElementById("hsvValue");

var rNum = document.getElementById("rNum");
var gNum = document.getElementById("gNum");
var bNum = document.getElementById("bNum");

hsvValue.innerHTML = "hsv(0deg,100%,100%)";

var rgb6 = new RegExp(/^#[a-fA-F0-9]{6}$/);
//note: following regexp is now unfunctional due to "color-code generator"
var rgb3 = new RegExp(/^#[a-fA-F0-9]{3}$/);

function CodeToRGB() {
if (rgb3.test(document.getElementById("cCode").value)){
    vR.value = parseInt(document.getElementById("cCode").value.substring(1,2) + document.getElementById("cCode").value.substring(1,2), 16);
    vG.value = parseInt(document.getElementById("cCode").value.substring(2,3) + document.getElementById("cCode").value.substring(2,3), 16);
    vB.value = parseInt(document.getElementById("cCode").value.substring(3,4) + document.getElementById("cCode").value.substring(3,4), 16);
}else if (rgb6.test(document.getElementById("cCode").value)){
    vR.value = parseInt(document.getElementById("cCode").value.substring(1,3), 16);
    vG.value = parseInt(document.getElementById("cCode").value.substring(3,5), 16);
    vB.value = parseInt(document.getElementById("cCode").value.substring(5,7), 16); 
}
rNum.value = vR.value;
gNum.value = vG.value;
bNum.value = vB.value;
funcRGB();
}
//color-code generator
function CodeToRGBother(rgb) {
    return "#" + rgb.map(function (value) {
    	return ("0" + Number(value).toString(16)).slice(-2) ;
    }).join("") ;
}

function keyRGB() {
vR.value = rNum.value;
vG.value = gNum.value;
vB.value = bNum.value;
funcRGB();
}

function funcRGB() {
var r = vR.value, g = vG.value, b = vB.value, hsv;
hsv = RGBtoHSV(r, g, b);
vH.value = hsv.h;
vS.value = hsv.s * 100 / 255;
vV.value = hsv.v * 100 / 255;

rNum.value = vR.value;
gNum.value = vG.value;
bNum.value = vB.value;

document.getElementById("cCode").value = CodeToRGBother( [vR.value, vG.value, vB.value] );

hsvValue.innerHTML = "hsv(" + vH.value + "deg," + vS.value + "%," + vV.value + "%)";
thisColor.style.backgroundColor = "rgb(" + vR.value + "," + vG.value + "," + vB.value + ")";
}

 
function RGBtoHSV (r, g, b, coneModel) {
var h, s, v, max = Math.max(Math.max(r, g), b), min = Math.min(Math.min(r, g), b);
// calc hue-rotate(H)
if (max == min) {
    h = 0;
} else if (max == r) {
    h = 60 * (g - b) / (max - min) + 0;
} else if (max == g) {
    h = (60 * (b - r) / (max - min)) + 120;
} else {
    h = (60 * (r - g) / (max - min)) + 240;
}
while (h < 0) {
    h += 360;
}
// calc saturation(S)
s = (max == 0)
    ? 0
    : (max - min) / max * 255;
// calc value(V)
v = max;
// submit
return {'h': h, 's': s, 'v': v};
}
</script>
